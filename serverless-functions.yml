createDocument:
    handler: src/functions/http/createDocument.handler
    events:
        - httpApi:
              path: /documents/new
              method: post
              authorizer:
                  name: jwtCognitoAuthorizer
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:Query
              - dynamodb:PutItem
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: UserDocumentsTable
        - Effect: Allow
          Action:
              - dynamodb:PutItem
              - dynamodb:BatchGetItem
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: DocumentsTable
getDocumentsByUser:
    handler: src/functions/http/getDocumentsByUser.handler
    events:
        - httpApi:
              path: /documents/user
              method: get
              authorizer:
                  name: jwtCognitoAuthorizer
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:Query
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: UserDocumentsTable
                    - index
                    - userId-lastAccessedAt-index
        - Effect: Allow
          Action:
              - dynamodb:GetItem
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: DocumentsTable
getDocument:
    handler: src/functions/http/getDocument.handler
    events:
        - httpApi:
              path: /documents/{id}
              method: get
              authorizer:
                  name: jwtCognitoAuthorizer
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:GetItem
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: UserDocumentsTable
        - Effect: Allow
          Action:
              - dynamodb:GetItem
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: DocumentsTable
updateDocument:
    handler: src/functions/http/updateDocument.handler
    events:
        - httpApi:
              path: /documents/{id}
              method: patch
              authorizer:
                  name: jwtCognitoAuthorizer
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:GetItem
              - dynamodb:UpdateItem
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: DocumentsTable
deleteDocument:
    handler: src/functions/http/deleteDocument.handler
    events:
        - httpApi:
              path: /documents/{id}
              method: delete
              authorizer:
                  name: jwtCognitoAuthorizer
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:GetItem
              - dynamodb:DeleteItem
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: DocumentsTable
        - Effect: Allow
          Action:
              - dynamodb:Query
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: UserDocumentsTable
                    - index
                    - documentId-index
        - Effect: Allow
          Action:
              - dynamodb:BatchWriteItem
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: UserDocumentsTable
getDocumentsCountByUser:
    handler: src/functions/http/getDocumentsCountByUser.handler
    events:
        - httpApi:
              path: /documents/user/count
              method: get
              authorizer:
                  name: jwtCognitoAuthorizer
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:Query
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: UserDocumentsTable

websocketConnection:
    handler: src/functions/websocket/connection.handler
    events:
        - websocket:
              route: $connect
              authorizer:
                  name: authWebsocket
                  identitySource:
                      - 'route.request.querystring.token'
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:DeleteItem
              - dynamodb:GetItem
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: WebSocketConnectionsTable
        - Effect: Allow
          Action:
              - dynamodb:Query
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: WebSocketConnectionsTable
                    - index
                    - '*'
        - Effect: Allow
          Action:
              - dynamodb:UpdateItem
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: UserDocumentsTable
        - Effect: Allow
          Action:
              - execute-api:ManageConnections
          Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketsApi}/*'
websocketDisconnection:
    handler: src/functions/websocket/disconnection.handler
    events:
        - websocket:
              route: $disconnect
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:DeleteItem
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: WebSocketConnectionsTable
        - Effect: Allow
          Action:
              - dynamodb:Query
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: WebSocketConnectionsTable
                    - index
                    - documentId-connectionId-index
        - Effect: Allow
          Action:
              - execute-api:ManageConnections
          Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketsApi}/*'
websocketSyncUpdate:
    handler: src/functions/websocket/syncUpdate.handler
    events:
        - websocket:
              route: sync-update # custom route for Yjs sync-update messages
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:Query
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: WebSocketConnectionsTable
                    - index
                    - documentId-connectionId-index
        - Effect: Allow
          Action:
              - dynamodb:DeleteItem
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: WebSocketConnectionsTable
        - Effect: Allow
          Action:
              - execute-api:ManageConnections
          Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketsApi}/*'
websocketCleanUpConnections:
    handler: src/functions/websocket/cleanUpConnections.handler
    events:
        - schedule:
              rate: rate(15 minutes) # schedule to run every 15 minutes to clean up disconnected connections (rate could change in the future)
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:DeleteItem
              - dynamodb:Scan
          Resource:
              Fn::Join:
                  - '/'
                  - - ${self:custom.dynamodbTableUrl}
                    - Ref: WebSocketConnectionsTable
        - Effect: Allow
          Action:
              - execute-api:ManageConnections
          Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketsApi}/*'

authWebsocket:
    handler: src/functions/cognito/authWebsocket.handler
customForgotPasswordMessage:
    handler: src/functions/cognito/customForgotPasswordMessage.handler
    events:
        - cognitoUserPool:
              pool: ${env:COGNITO_USER_POOL_NAME}
              trigger: CustomMessage
              existing: true
